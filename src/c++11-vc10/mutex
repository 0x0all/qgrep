#pragma once

#define WIN32_LEAN_AND_MEAN
#define NOMINMAX
#include <windows.h>

#include <assert.h>

namespace std
{
    class mutex
    {
        friend class condition_variable;

    public:
        mutex()
        {
            InitializeCriticalSection(&cs);
        }

        ~mutex()
        {
            DeleteCriticalSection(&cs);
        }

        void lock()
        {
            EnterCriticalSection(&cs);
        }

        void unlock()
        {
            LeaveCriticalSection(&cs);
        }

    private:
        CRITICAL_SECTION cs;
    };

    template <typename M> class lock_guard
    {
    public:
        lock_guard(M& mtx): mtx(mtx)
        {
            mtx.lock();
        }

        ~lock_guard()
        {
            mtx.unlock();
        }

    private:
        M& mtx;
    };

    template <typename M> class unique_lock
    {
        friend class condition_variable;

    public:
        unique_lock(M& mtx): mtx(mtx), owns(true)
        {
            mtx.lock();
        }

        ~unique_lock()
        {
            if (owns) mtx.unlock();
        }

        void unlock()
        {
            assert(owns);

            owns = false;
            mtx.unlock();
        }

    private:
        M& mtx;
        bool owns;
    };

}
